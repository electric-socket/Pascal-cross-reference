"Every cross reference program has a partial compiler built in."
 - Me

Listing   format
if by line number it's 000,000
else  page-line
Line    N B  I Line
0000-00 0 00   -----
Line - Page number and line number
Count number of lines in total program. If more than 10,000 oages, push
page number width to 6 digits
N - proc/func Nesting level 0-9 then A-Z then *
B - block level (begin depth) First digit is start of line
    second digit is block level at end of line
    If begin/end on same line, both will have same number
    number only shows if change is -- before procedures
I  - Include depth, 1-9 then +

If we do not list non-executed code (conditional fail) show part on same line
either in strike-out or gray. If list but not count, show " SKIPPED " for the
line prefix code. If list and count, show - in all three block and nest
fields, possibly show in lighter color. If no lisy nut count, strikeout for
remainder of line until condition ends or end of line. On line where it begins
in conditional-non execute, strike out until that ends, or no list if it
starts and ends non-execute and no change. On text listing, show blanks?


Might be virtual generation. HTML would have page cross-refernce of every
item to its definition. Class to base class, etc. Could save each unit's
generation in a work file until final output. Especially if they want the
lisitng in alphabetical order. Has to be created in find order as some units
depend on other units and so on

If we have TOC in advance, we would have to generate pages after TOC

Design considerations for Pascal Cross-Reference

* If command line has no options
*    Display message and exit
* Read command line for options
* Switches are NOT case sensitive
*   @filename - equiv to -cf=filename
*   -ac (AC)
*   -cc/--cmd=character - single character appearing after opening
                   of block comment to indicate a command
                   to this program (default .)
*   -cf/--config=filename - alternate configuration file
*   -dc/--disable-commands - program files will have no commands / ignore commands
*   -h or --help  - show help and exit
*   -id/--inc/--include-dir=directory - additional directory where files are located (include)
*   -ll --listline --list-line  - list/cross-reference program by line number (overrides -lp)
*   -lp --listpage --list-page  - list/cross-reference program by page line number (default, switch by -ll)
*   -lua --listalpha --list-alpha - list units in alphabetical order, main program last  (overrides -lup)
*   -nb --noblock --no-block - don't list block depth
*   -nn --nonest --no-nest - Don'y list procedure nesting depth
*   -nh --nohtml --no-html - Don't produce HTML listing
*   -nl --nolist --no-list - Don't produce text listing
*   -np --nopdf --no-pdf - Don't produce pdf listing
*   -nu --nounit --no-unit -- don't produce individual unit cross reference
*   -ns --nostats --no-stats -- don't produce statistics page
*   -nta --no-trace --no trace-all -- no dependency traces
*   -ntp --no-trace-proc  -- no dependency trace for procedures and functions
*   -ntu --no-trace-units -- no dependency trace for units
*   -s/--source=filename - Main (source) program (or if filename is only argument)
*   -sw or --switches  - show all switches and exit
*   -test/--test - run sample to view how output looksl.
*   -u/--unit/--unitpath=directory - additional unit directory - equivalent to "unitpath" command or {$UNITPATH}

On Windows, commands may start with /
Filenames may be quoted with " or '; the same one can't be in a file name

Configuration file parameters  OR command switches
long use --, short - or /
  General file commands (apply globally)
* AB keyword,close,type - add block that begins with this keyord, ends
  with close, type to indicate type of block
  R(ECORD) / O(BJECT) / C(LASS) /
  B(LOCK) increasing block count (flipped by NB)
  U(NTIL) block not raising count
  I(GNORE)  Ignore everythng between them
* AC - allow . commands in programs (default, flipped by DC) [File]
* ALLCR[EF] (CR)
* ALLOW C[OMMANDS] (AC)
* CA - Generate combined cross-reference
  listing for all files (default)  {flipped by NC)+-
* CN (NC)
* COM[MANDS] [ON]  )ac)
* CM - Main cref only (don't do unit cref)
* CR[EF] A[LL] (CA)
* CR[EF] M[AIN] (CM)
* CR[EF] O[FF] (NC)
* CR[EF] U[NIT]  - Cross teference only Units (no main; flips CA, flipped by NC)
* CT (CA) (cref total)
* DC  - don't allow . commands (flips AC)
* I[NCLUDE] filename - include this file (should be a unit) [File]      
* DEF/DEFINE symbol [,|= [value]] - Define a compile-time symbol
* DIS[ALLOW] [COMMANDS]  (DC)
* IP / PATH name - add a search directory [File]
* LIST P[AGE] (PN) Identifier numbering
* LL - Number references by line number (flips PN)
* LN (LL)
* LP - Number references by page and line (default. flipped by LN)   Identifier numbering
* LI[ST] - List program (default)
* LIST L[INE] (LN)
* MAXW[IDTH] (W)
* MW (W)
* NB / --no-block - (don't increase block count. flips B
* NC -  Don't generate cross reference (flips CA)
* NL - Don't list program (flips LI)
* NO B[LOCK] (NB)
* NO CO[MMANDS]/NOC[OMMANDS] (DC)
* NOCREF (NC)
* NOL[IST] (NL)
* NOS[ORTUNIT]
* NOUNITSORT (NS)
* NS  - Do not sort units (default, flipped by SU)
* PN (LP)
* RK / REM[OVE] keuword - list keyord usage in cross reference (still opertates)

* ST - Count reserved word usage, file lines, file sizes
                       number of identifiers, consts, vars, objects, classes
* STATS (ST)
* STATISICS (ST)
* SU /SORT[UNIT] - List units in aphabetical order (flips NU)
* UN directory - add search path for units
* UNITSO[RT]
* UP  - unit path
* UND[EF] symbol - Delete a symbol
* UNI[T PATH] (UN)
* W[IDTH] n - Width of listing (minimum 40) default 150   0 for no limit
  oversize lines will fold at last delimiter






* NOUNIT/NU /CREF NOU[NIT]- Don't generate unit cross-reference
* NOST[ATS] = dont show statistice; inverts ST
* ADD KEY[WORD]/KEY[WORD] ident - Add a keyword not in our list
* PRE/PREDEF/PREDEFINE ident - Presume this is defined
* BLOCK start,finish BLOCK start:finish - define a new block type
starts with symbol "start" ends with symbol "finish" these words
will automatically become keywords
* KEY OFF/NO KEY ident - treat this as not a keyword
* KS/KEY S[TD]/ST[ANDARD] - Only use STD keywords (Jensen & Wirth)
* KE/KEY E]NHANCED] - Accept UCSD/XDPascal level keywords
& KT/KEY T[URBO] - Accept Turbo Pascal keywords
* KO/KEY OB[JECT] -  Object Pascal standard keywords
* KD/KEY D[ELPHI] - Delhi Standard keywords
* KF/KEY F[PC]/F[REEPASCAL] - FPC Standard Keywords
* KA/KEY A[LL] - Use all keywords

* MA/MO[DIFIER] A]FTER] keyword, modifier  - this identifier is only a
                                             keyword if immediately after
                                             keyword
* MB/MO[DIFIER] B[EFORE] keyword, modifier - this identifier is only a
                                             keyword if immediately before
                                             keyword
* MN/MO[DIFIER] N[EAR] keyword,modifier    - Can be anywhere from
                                             prior semicolon to next when
                                             this keyword is present
* MP/MO[DIFIER] P[RECEDES] keyword,modifier  - Can be anywhere from
                                             prior semicolon to this keyword
* Mf/MO[DIFIER] F[OLLOWS] keyword,modifier  - Can be anywhere from this keyword
                                                to next semicolon
* IB/BLOCK/IG[NORE] B[LOCK] start,finish  - ignore everything betwee these
                                    keywords (ASM blocks)
* AA/A[LLOW] A[SSEMBLY] - Include assembly code (option)
* CREF ASM
* NOCREF ASM

For code not compiled because of conditionals

* COND[ITIONALS] P[RINT]/PC /P[RINT] C[ONDITIONALS] - List code not compiled (inverse of XC)
                               not included in cross reference
* XC /E[XCLUDE] C[ONDITIONALS] -    Don't list skipped code (default,
  COND NOP[RINT]                                    flip by PC.IC)
* IC / I[NCLUDE] C[ONDITIONALS] -   List AND CREF skipped code (INVERSE XC)
Skipped code on the same line as visible code is listed in strike-out
When Included, it is in slightly lighter print
Skipped code should have 3 choices:
1. Skip code without notice, next line number is wherr code starts again
2. Skip code and count missing lines, showing a linr numbrt change (or
   an indication that so many lines were askipped
   3  . List it anywat, showing it in different colors, or
        dimmed/strikeouy



