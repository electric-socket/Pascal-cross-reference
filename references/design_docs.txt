"Every cross reference program has a partial compiler built in."
 - Me

Listing   format
if by line number it's 000,000
else  page-line
  Line  N B  I Line
0000-00 0 00   -----
Line - Page number and line number
Count number of lines in total program. If more than 10,000 oages, push
page number width to 6 digits
N - proc/func Nesting level blank or 0-9 then A-Z then *
B - block level (begin depth) First digit is start of line
    second digit is block level at end of line
    If begin/end on same line, both will have same number
    Procedure /func header shows 0 then 1 at first begin
    number only shows if change is -- before procedures
I - Include depth, 1-Z then +

If we do not list non-executed code (conditional fail) show part on same line
either in strike-out or gray. If list but not count, show " SKIPPED " for the
line prefix code. If list and count, show - in all three block and nest
fields, possibly show in lighter color. If no lisy nut count, strikeout for
remainder of line until condition ends or end of line. On line where it begins
in conditional-non execute, strike out until that ends, or no list if it
starts and ends non-execute and no change. On text listing, show blanks?


Might be virtual generation (meaning we don't actully create a print out,
but instead save the information until we need to generate it.) HTML would
have page/line cross-reference of every item to its definition, i.e. link to the
definition location (means adding position on page. Class either has a
base class or it has no base. Could save each unit's generation in a work
file (if not kept in mrmotu) until final output. Especially if they want the
listing in alphabetical order. Has to be created in find order as some units
depend on other units and so on.

If we have TOC in advance, we would have to generate pages after TOC.

Design considerations for Pascal Cross-Reference

* If command line has no options
*    Display message and exit
* Read command line for options
* Switches are NOT case sensitive

On Windows, commands may start with /
Filenames or arguments eith spaces must be quoted

*   @filename - equiv to -cf=filename
*   -ac /  --allow-commands (see command AC)
*   -cc=/--cmd=character - single character appearing after opening
                   of block comment to indicate a command
                   to this program (default ., may not be $ or space)
*   -cf/--config=filename - alternate configuration file
*   -dc/--disable-commands - program files will
          have no . commands / ignore . commands
*   --dd/ --disable-directives - ignore {$ and (*$
*   -dry  --dryrun/--dry-run - test all commands but don't do anything
*   -e / -error-redireect -- send statistics to stderr
*   -h or --help  - show help and exit
*   -id=/--inc/--include-dir=directory - additional directory where include
             files are located (include)
*   -la --listalpha --list-alpha - list units in alphabetical order,
          main program last  (overrides -lup)
*   -ll --listline --list-line  - list/cross-reference program by line
          number (overrides -lp)
*   -lp --listpage --list-page - list ctoss-rederences by page and line`
          (default, flipped by -ll)
*   -nb --noblock --no-block - don't list block depth
*   -nh --nohtml --no-html - Don't produce HTML listing
*   -nl --nolist --no-list - Don't produce text listing
*   -nn --nonest --no-nest - Don'y list procedure nesting depth
*   -np --nopdf --no-pdf - Don't produce pdf listing
*   -ns --nostats --no-stats -- don't produce statistics page
*   -nta --no-trace --no trace-all -- no dependency traces
*   -ntp --no-trace-proc  -- no dependency trace for procedures and functions
*   -ntu --no-trace-units -- no dependency trace for units
*   -nu --nounit --no-unit -- don't produce individual unit cross reference
*   -s=/--source=filename - Main (source) program (or if filename is only argument)
*   -se/--settings - displzy settings before starting (included in /dry)
*   -st/--stat -- dump statistics
*   -sw or --switches -  show all switches and exit
*   -test/--test - run sample to view how output looks.
*   -u=/--unitpath= directory - additional unit directory, similar to
      $UNITPATH

Configuration file parameters  OR command switches
long use --, short - or /
  General file commands (apply globally)
* AB keyword,close,type - add block that begins with this keyord, ends
  with close, type to indicate type of block
  R(ECORD) / O(BJECT) / C(LASS) /
  B(LOCK) increasing block count (flipped by NB)
  U(NTIL) block not raising count
  I(GNORE)  Ignore everythng between them
* AC - allow . commands in programs (default, flipped by DC/NC)
* ADD KEY[WORD]/KEY[WORD] ident - Add a keyword not in our list
* ALLCR[EF] (see CA)
* ALL CREF (see CA)
* ALLOW C[OMMANDS] (see AC)
* BLOCK start,finish BLOCK start:finish - define a new block type
  starts with symbol "start" ends with symbol "finish" these words
  will automatically become keywords
* CA - Generate combined cross-reference
  listing for all files (default)  {flipped by NC)+-
* CN (NC)
* COM[MANDS] [ON]  (ac)
* COND NOP[RINT] (XC)
* COND[ITIONALS] P[RINT]/PC /P[RINT] C[ONDITIONALS] - List code not compiled
  and not included in cross reference (inverse of XC)
* CM - Main cref only (don't do unit cref)
* CR[EF] A[LL] (CA)
* CR[EF] M[AIN] (CM)
* CR[EF] O[FF] (NC)
* CR[EF] U[NIT]  - Cross teference only Units (no main; flips CA, flipped by NC)
* CT (CA) (cref total)
* DC  - don't allow . commands (flips AC)
* DEF/DEFINE symbol [,|= [value]] - Define a compile-time symbol
* DIS[ALLOW] [COMMANDS]  (see DC)
* E  - sends statistics to stderr
* ERROR REDIRECT (see E)
* I[NCLUDE] filename - include this file (should be a unit) [File]
* IB/BLOCK/IG[NORE] B[LOCK] start,finish  - ignore everything between these
  keywords (ASM blocks)
* IC / I[NCLUDE] C[ONDITIONALS] -   List AND CREF skipped code (INVERSE XC)
  Skipped code on the same line as visible code is listed in strike-out
  When Included, it is in slightly lighter print
  Skipped code should have 3 choices:
   1. Skip code without notice, next line number is wherr code starts again
   2. Skip code and count missing lines, showing a linr numbrt change (or
      an indication that so many lines were askipped
   3  . List it anywat, showing it in different colors, or
        dimmed/strikeout

* IP / name - add name as an include file search directory [File]
* LIST P[AGE] (PN) Identifier numbering by page (default)
* KA/KEY A[LL] - Use all keywords
* KD/KEY D[ELPHI] - Delhi Standard keywords
* KEY O[FF]/NO KEY/NK ident - treat this as not a keyword
* KEY[WORD] / ADD KEY[WORD] ident - Add a keyword not in our list
* KF/KEY F[PC]/F[REEPASCAL] - FPC Standard Keywords
* KO/KEY OB[JECT] -  Object Pascal standard keywords
# KS/KEY S[TD]/ST[ANDARD] - Only use STD keywords (Jensen & Wirth)
  This is the standard and is automatic
* KE/KEY E]NHANCED] - Accept UCSD/XDPascal level keywords
* KT/KEY T[URBO] - Accept Turbo Pascal keywords (LANG TURBO)
* KX/KEY XD[PASCAL]
* LANG TURBO,DELPHI,OBJECT,FREEPASCAL,XDPASCAL - add this language's
  keywords, identifiers, and compile-time symbols
* LL/LN - Number references by line number (flips PN/LP)
* LN (-LL)
* LP/PN - Number references by page and line (default. flipped by LN)
* LI[ST] - List program (default)
* LIST L[INE] (-LL)
* MA/MO[DIFIER] A]FTER] keyword, modifier  - this identifier is only a
  keyword if immediately after keyword
* MAXW[IDTH] /MW (-W)
* MB/MO[DIFIER] B[EFORE] keyword, modifier - this identifier is only a
  keyword if immediately before keyword                                              prior semicolon to this keyword
* MF/MO[DIFIER] F[OLLOWS] keyword,modifier  - Can be anywhere from this keyword
  to next semicolon
* MN/MO[DIFIER] N[EAR] keyword,modifier    - Can be anywhere from
  prior semicolon to next ; when this keyword is present
* MP/MO[DIFIER] P[RECEDES] keyword,modifier  - Can be anywhere from
  prior semicolon to this keyword
* MW - max width of output line
* NC -  Don't generate cross reference (flips CA)   
* NK/KEY OFF/NO KEY ident - treat this as not a keyword
* NL name - ctoss ref buy don't lisy unit name (only gives
             trf to unit but no line or page)
* NP - Don't list program (flips LI)
* NO B[LOCK] (NB)
* NO CO[MMANDS]/NOC[OMMANDS] (DC)
* NO S[ORTUNIT] (NS)
* NOCREF (see NC)
* NOL[IST] (NL)
* NOSO[RTUNIT] (NS)
* NOST[ATS] = dont show statistice; inverts ST
* NS  - Do not sort units (default, flipped by SU)
* NU NOUNIT/ /CREF NOU[NIT]- Don't generate unit cross-reference
* PATH - folder to find unir or include files
* PN (LP)
* PRE/PREDEF/PREDEFINE ident - Presume this is defined
* RK / REM[OVE] keuword - list keyord usage in cross reference (still opertates)
* ST - Count reserved word usage, file lines, file sizes
                       number of identifiers, consts, vars, objects, classes
* STATS (-ST)
* STATISICS (-ST)
* SU /SORT[UNIT]/UNITSO[RT] - List units in aphabetical order (flips NU)
* UN/UP directory - add search path for units
* UNITSO[RT]/SU
* UP/UN - unit path
* UND[EF] symbol - Delete a symbol
* UNI[T PATH] name (UN)
* W[IDTH] n - Width of listing (minimum 40) default 150   0 for no limit
  oversize lines will fold at last delimiter
* XC /E[XCLUDE] C[ONDITIONALS] -    Don't list skipped code (default, flip by PC.IC)

* AA/A[LLOW] A[SSEMBLY] - Include assembly code in cref (option)
* NOCREF ASM  -- same as NA

For code not compiled because of conditionals



